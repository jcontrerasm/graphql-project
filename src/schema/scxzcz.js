Socket {
  connecting: false,
  _hadError: false,
  _handle:
   TCP {
     reading: true,
     owner: [Circular],
     onread: [Function: onread],
     onconnection: null,
     writeQueueSize: 0,
     _consumed: true },
  _parent: null,
  _host: null,
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: false,
     endEmitted: false,
     reading: true,
     sync: false,
     needReadable: true,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events:
   { end: [ [Object], [Function: bound socketOnEnd] ],
     _socketEnd: [Function: onSocketEnd],
     drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
     timeout: [Function: socketOnTimeout],
     data: [Function: bound socketOnData],
     error: [Function: socketOnError],
     close:
      [ [Function: bound socketOnClose],
        [Function: onServerResponseClose] ],
     resume: [Function: onSocketResume],
     pause: [Function: onSocketPause] },
  _eventsCount: 9,
  _maxListeners: undefined,
  _writableState:
   WritableState {
     objectMode: false,
     highWaterMark: 16384,
     finalCalled: false,
     needDrain: false,
     ending: false,
     ended: false,
     finished: false,
     destroyed: false,
     decodeStrings: false,
     defaultEncoding: 'utf8',
     length: 0,
     writing: false,
     corked: 0,
     sync: true,
     bufferProcessing: false,
     onwrite: [Function: bound onwrite],
     writecb: null,
     writelen: 0,
     bufferedRequest: null,
     lastBufferedRequest: null,
     pendingcb: 0,
     prefinished: false,
     errorEmitted: false,
     bufferedRequestCount: 0,
     corkedRequestsFree:
      { next: null,
        entry: null,
        finish: [Function: bound onCorkedFinish] } },
  writable: true,
  allowHalfOpen: true,
  _bytesDispatched: 0,
  _sockname: null,
  _pendingData: null,
  _pendingEncoding: '',
  server:
   Server {
     domain: null,
     _events:
      { request: [Object],
        connection: [Function: connectionListener] },
     _eventsCount: 2,
     _maxListeners: undefined,
     _connections: 1,
     _handle:
      TCP {
        reading: false,
        owner: [Circular],
        onread: null,
        onconnection: [Function: onconnection],
        writeQueueSize: 0 },
     _usingSlaves: false,
     _slaves: [],
     _unref: false,
     allowHalfOpen: true,
     pauseOnConnect: false,
     httpAllowHalfOpen: false,
     timeout: 120000,
     keepAliveTimeout: 5000,
     _pendingResponseData: 0,
     maxHeadersCount: null,
     headersTimeout: 40000,
     _connectionKey: '6::::3000',
     [Symbol(IncomingMessage)]: { [Function: IncomingMessage] super_: [Object] },
     [Symbol(ServerResponse)]: { [Function: ServerResponse] super_: [Object] },
     [Symbol(asyncId)]: 7 },
  _server:
   Server {
     domain: null,
     _events:
      { request: [Object],
        connection: [Function: connectionListener] },
     _eventsCount: 2,
     _maxListeners: undefined,
     _connections: 1,
     _handle:
      TCP {
        reading: false,
        owner: [Circular],
        onread: null,
        onconnection: [Function: onconnection],
        writeQueueSize: 0 },
     _usingSlaves: false,
     _slaves: [],
     _unref: false,
     allowHalfOpen: true,
     pauseOnConnect: false,
     httpAllowHalfOpen: false,
     timeout: 120000,
     keepAliveTimeout: 5000,
     _pendingResponseData: 0,
     maxHeadersCount: null,
     headersTimeout: 40000,
     _connectionKey: '6::::3000',
     [Symbol(IncomingMessage)]: { [Function: IncomingMessage] super_: [Object] },
     [Symbol(ServerResponse)]: { [Function: ServerResponse] super_: [Object] },
     [Symbol(asyncId)]: 7 },
  _idleTimeout: 120000,
  _idleNext:
   TimersList {
     _idleNext: [Circular],
     _idlePrev: [Circular],
     _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
     _unrefed: true,
     msecs: 120000,
     nextTick: false },
  _idlePrev:
   TimersList {
     _idleNext: [Circular],
     _idlePrev: [Circular],
     _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
     _unrefed: true,
     msecs: 120000,
     nextTick: false },
  _idleStart: 2840,
  _destroyed: false,
  parser:
   HTTPParser {
     '0': [Function: parserOnHeaders],
     '1': [Function: parserOnHeadersComplete],
     '2': [Function: parserOnBody],
     '3': [Function: parserOnMessageComplete],
     '4': [Function: bound onParserExecute],
     _headers: [],
     _url: '',
     _consumed: true,
     socket: [Circular],
     incoming:
      IncomingMessage {
        _readableState: [Object],
        readable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Circular],
        connection: [Circular],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '/?',
        method: 'POST',
        statusCode: null,
        statusMessage: null,
        client: [Circular],
        _consuming: true,
        _dumped: false,
        next: [Function: next],
        baseUrl: '/graphql',
        originalUrl: '/graphql?',
        _parsedUrl: [Object],
        params: {},
        query: {},
        res: [Object],
        read: [Function] },
     outgoing: null,
     parsingHeadersStart: 0,
     maxHeaderPairs: 2000,
     onIncoming: [Function: bound parserOnIncoming],
     [Symbol(isReused)]: false },
  on: [Function: socketOnWrap],
  _paused: false,
  _httpMessage:
   ServerResponse {
     domain: null,
     _events: { finish: [Function: bound resOnFinish] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: [Circular],
     connection: [Circular],
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req:
      IncomingMessage {
        _readableState: [Object],
        readable: false,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Circular],
        connection: [Circular],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '/?',
        method: 'POST',
        statusCode: null,
        statusMessage: null,
        client: [Circular],
        _consuming: true,
        _dumped: false,
        next: [Function: next],
        baseUrl: '/graphql',
        originalUrl: '/graphql?',
        _parsedUrl: [Object],
        params: {},
        query: {},
        res: [Circular],
        read: [Function] },
     locals: {},
     [Symbol(outHeadersKey)]: { 'x-powered-by': [Array] } },
  [Symbol(asyncId)]: 10,
  [Symbol(bytesRead)]: 0,
  [Symbol(asyncId)]: 12,
  [Symbol(triggerAsyncId)]: 10 }




  [ '_readableState',
  'readable',
  'domain',
  '_events',
  '_eventsCount',
  '_maxListeners',
  'socket',
  'connection',
  'httpVersionMajor',
  'httpVersionMinor',
  'httpVersion',
  'complete',
  'headers',
  'rawHeaders',
  'trailers',
  'rawTrailers',
  'aborted',
  'upgrade',
  'url',
  'method',
  'statusCode',
  'statusMessage',
  'client',
  '_consuming',
  '_dumped',
  'next',
  'baseUrl',
  'originalUrl',
  '_parsedUrl',
  'params',
  'query',
  'res',
  'read' ]
